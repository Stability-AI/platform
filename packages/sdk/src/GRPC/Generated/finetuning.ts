/* eslint-disable */
// @ts-nocheck
// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "finetuning.proto" (package "gooseai", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Struct } from "./google/protobuf/struct";
/**
 * @generated from protobuf message gooseai.FineTuningModel
 */
export interface FineTuningModel {
  /**
   * @generated from protobuf field: string id = 1;
   */
  id: string; // ID of the model, UUIDv4
  /**
   * @generated from protobuf field: string user_id = 2;
   */
  userId: string; // ID of user who created the model
  /**
   * @generated from protobuf field: string name = 3;
   */
  name: string; // a readable model name
  /**
   * @generated from protobuf field: optional gooseai.FineTuningMode mode = 4;
   */
  mode?: FineTuningMode; // the mode of the model
  /**
   * @generated from protobuf field: optional string object_prompt = 5;
   */
  objectPrompt?: string; // freeform text description of object, should only be set when mode is OBJECT
  /**
   * @generated from protobuf field: string project_id = 6;
   */
  projectId: string; // project ID with assets to be used for fine tuning
  /**
   * @generated from protobuf field: double duration = 7;
   */
  duration: number; // duration in seconds for how long the model took to train
  /**
   * @generated from protobuf field: gooseai.FineTuningStatus status = 8;
   */
  status: FineTuningStatus; // the current status of the model
  /**
   * @generated from protobuf field: string engine_id = 9;
   */
  engineId: string; // the engineId of a fine-tuneable Stability model
  /**
   * @generated from protobuf field: optional string failure_reason = 10;
   */
  failureReason?: string; // If a model's training failed, this will contain the reason
}
/**
 * @generated from protobuf message gooseai.CreateModelRequest
 */
export interface CreateModelRequest {
  /**
   * @generated from protobuf field: string name = 1;
   */
  name: string; // a readable model name
  /**
   * @generated from protobuf field: optional gooseai.FineTuningMode mode = 2;
   */
  mode?: FineTuningMode; // the mode of the model
  /**
   * @generated from protobuf field: optional string object_prompt = 3;
   */
  objectPrompt?: string; // freeform text description of object, should only be set when mode is OBJECT
  /**
   * @generated from protobuf field: string project_id = 4;
   */
  projectId: string; // the project_id with assets to be used for fine tuning
  /**
   * @generated from protobuf field: string engine_id = 5;
   */
  engineId: string; // the engineId of an fine-tuneable Stability model
  /**
   * @generated from protobuf field: optional google.protobuf.Struct extras = 2047;
   */
  extras?: Struct; // for development use
}
/**
 * @generated from protobuf message gooseai.CreateModelResponse
 */
export interface CreateModelResponse {
  /**
   * @generated from protobuf field: gooseai.FineTuningModel model = 1;
   */
  model?: FineTuningModel;
}
/**
 * @generated from protobuf message gooseai.GetModelRequest
 */
export interface GetModelRequest {
  /**
   * @generated from protobuf field: string id = 1;
   */
  id: string; // ID of the model
}
/**
 * @generated from protobuf message gooseai.GetModelResponse
 */
export interface GetModelResponse {
  /**
   * @generated from protobuf field: gooseai.FineTuningModel model = 1;
   */
  model?: FineTuningModel;
}
/**
 * @generated from protobuf message gooseai.UpdateModelRequest
 */
export interface UpdateModelRequest {
  /**
   * @generated from protobuf field: string id = 1;
   */
  id: string; // the id of the model
  /**
   * @generated from protobuf field: optional string name = 2;
   */
  name?: string; // a readable model name
  /**
   * @generated from protobuf field: optional gooseai.FineTuningMode mode = 3;
   */
  mode?: FineTuningMode; // the mode of the model
  /**
   * @generated from protobuf field: optional string object_prompt = 4;
   */
  objectPrompt?: string; // freeform text description of object, should only be set when mode is OBJECT
  /**
   * @generated from protobuf field: optional string engine_id = 5;
   */
  engineId?: string; // the engineId of an fine-tuneable Stability model
}
/**
 * @generated from protobuf message gooseai.UpdateModelResponse
 */
export interface UpdateModelResponse {
  /**
   * @generated from protobuf field: gooseai.FineTuningModel model = 1;
   */
  model?: FineTuningModel;
}
/**
 * @generated from protobuf message gooseai.DeleteModelRequest
 */
export interface DeleteModelRequest {
  /**
   * @generated from protobuf field: string id = 1;
   */
  id: string; // ID of the model to delete
}
/**
 * @generated from protobuf message gooseai.DeleteModelResponse
 */
export interface DeleteModelResponse {
  /**
   * @generated from protobuf field: gooseai.FineTuningModel model = 1;
   */
  model?: FineTuningModel;
}
/**
 * @generated from protobuf message gooseai.ResubmitModelRequest
 */
export interface ResubmitModelRequest {
  /**
   * @generated from protobuf field: string id = 1;
   */
  id: string; // ID of the model to resubmit
}
/**
 * @generated from protobuf message gooseai.ResubmitModelResponse
 */
export interface ResubmitModelResponse {
  /**
   * @generated from protobuf field: gooseai.FineTuningModel model = 1;
   */
  model?: FineTuningModel;
}
/**
 * @generated from protobuf message gooseai.ListModelsRequest
 */
export interface ListModelsRequest {
  /**
   * @generated from protobuf oneof: id
   */
  id:
    | {
        oneofKind: "orgId";
        /**
         * @generated from protobuf field: string org_id = 1;
         */
        orgId: string; // the organization's ID
      }
    | {
        oneofKind: "userId";
        /**
         * @generated from protobuf field: string user_id = 2;
         */
        userId: string; // or the user's ID
      }
    | {
        oneofKind: undefined;
      };
}
/**
 * @generated from protobuf message gooseai.ListModelsResponse
 */
export interface ListModelsResponse {
  /**
   * @generated from protobuf field: repeated gooseai.FineTuningModel models = 1;
   */
  models: FineTuningModel[]; // the list of models
}
/**
 * @generated from protobuf enum gooseai.FineTuningMode
 */
export enum FineTuningMode {
  /**
   * No mode specified
   *
   * @generated from protobuf enum value: FINE_TUNING_MODE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,
  /**
   * Fine tuning a face model
   *
   * @generated from protobuf enum value: FINE_TUNING_MODE_FACE = 1;
   */
  FACE = 1,
  /**
   * Fine tuning a style model
   *
   * @generated from protobuf enum value: FINE_TUNING_MODE_STYLE = 2;
   */
  STYLE = 2,
  /**
   * Fine tuning an object model
   *
   * @generated from protobuf enum value: FINE_TUNING_MODE_OBJECT = 3;
   */
  OBJECT = 3,
}
/**
 * @generated from protobuf enum gooseai.FineTuningStatus
 */
export enum FineTuningStatus {
  /**
   * Model not yet started
   *
   * @generated from protobuf enum value: FINE_TUNING_STATUS_NOT_STARTED = 0;
   */
  NOT_STARTED = 0,
  /**
   * Model is currently running
   *
   * @generated from protobuf enum value: FINE_TUNING_STATUS_RUNNING = 1;
   */
  RUNNING = 1,
  /**
   * Model has completed successfully
   *
   * @generated from protobuf enum value: FINE_TUNING_STATUS_COMPLETED = 2;
   */
  COMPLETED = 2,
  /**
   * Model has failed
   *
   * @generated from protobuf enum value: FINE_TUNING_STATUS_FAILED = 3;
   */
  FAILED = 3,
  /**
   * Model has been submitted
   *
   * @generated from protobuf enum value: FINE_TUNING_STATUS_SUBMITTED = 4;
   */
  SUBMITTED = 4,
}
// @generated message type with reflection information, may provide speed optimized methods
class FineTuningModel$Type extends MessageType<FineTuningModel> {
  constructor() {
    super("gooseai.FineTuningModel", [
      { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      {
        no: 4,
        name: "mode",
        kind: "enum",
        opt: true,
        T: () => [
          "gooseai.FineTuningMode",
          FineTuningMode,
          "FINE_TUNING_MODE_",
        ],
      },
      {
        no: 5,
        name: "object_prompt",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      { no: 6, name: "project_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 7, name: "duration", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
      {
        no: 8,
        name: "status",
        kind: "enum",
        T: () => [
          "gooseai.FineTuningStatus",
          FineTuningStatus,
          "FINE_TUNING_STATUS_",
        ],
      },
      { no: 9, name: "engine_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      {
        no: 10,
        name: "failure_reason",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
  create(value?: PartialMessage<FineTuningModel>): FineTuningModel {
    const message = {
      id: "",
      userId: "",
      name: "",
      projectId: "",
      duration: 0,
      status: 0,
      engineId: "",
    };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<FineTuningModel>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: FineTuningModel
  ): FineTuningModel {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string id */ 1:
          message.id = reader.string();
          break;
        case /* string user_id */ 2:
          message.userId = reader.string();
          break;
        case /* string name */ 3:
          message.name = reader.string();
          break;
        case /* optional gooseai.FineTuningMode mode */ 4:
          message.mode = reader.int32();
          break;
        case /* optional string object_prompt */ 5:
          message.objectPrompt = reader.string();
          break;
        case /* string project_id */ 6:
          message.projectId = reader.string();
          break;
        case /* double duration */ 7:
          message.duration = reader.double();
          break;
        case /* gooseai.FineTuningStatus status */ 8:
          message.status = reader.int32();
          break;
        case /* string engine_id */ 9:
          message.engineId = reader.string();
          break;
        case /* optional string failure_reason */ 10:
          message.failureReason = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: FineTuningModel,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string id = 1; */
    if (message.id !== "")
      writer.tag(1, WireType.LengthDelimited).string(message.id);
    /* string user_id = 2; */
    if (message.userId !== "")
      writer.tag(2, WireType.LengthDelimited).string(message.userId);
    /* string name = 3; */
    if (message.name !== "")
      writer.tag(3, WireType.LengthDelimited).string(message.name);
    /* optional gooseai.FineTuningMode mode = 4; */
    if (message.mode !== undefined)
      writer.tag(4, WireType.Varint).int32(message.mode);
    /* optional string object_prompt = 5; */
    if (message.objectPrompt !== undefined)
      writer.tag(5, WireType.LengthDelimited).string(message.objectPrompt);
    /* string project_id = 6; */
    if (message.projectId !== "")
      writer.tag(6, WireType.LengthDelimited).string(message.projectId);
    /* double duration = 7; */
    if (message.duration !== 0)
      writer.tag(7, WireType.Bit64).double(message.duration);
    /* gooseai.FineTuningStatus status = 8; */
    if (message.status !== 0)
      writer.tag(8, WireType.Varint).int32(message.status);
    /* string engine_id = 9; */
    if (message.engineId !== "")
      writer.tag(9, WireType.LengthDelimited).string(message.engineId);
    /* optional string failure_reason = 10; */
    if (message.failureReason !== undefined)
      writer.tag(10, WireType.LengthDelimited).string(message.failureReason);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message gooseai.FineTuningModel
 */
export const FineTuningModel = new FineTuningModel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateModelRequest$Type extends MessageType<CreateModelRequest> {
  constructor() {
    super("gooseai.CreateModelRequest", [
      { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      {
        no: 2,
        name: "mode",
        kind: "enum",
        opt: true,
        T: () => [
          "gooseai.FineTuningMode",
          FineTuningMode,
          "FINE_TUNING_MODE_",
        ],
      },
      {
        no: 3,
        name: "object_prompt",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      { no: 4, name: "project_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 5, name: "engine_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 2047, name: "extras", kind: "message", T: () => Struct },
    ]);
  }
  create(value?: PartialMessage<CreateModelRequest>): CreateModelRequest {
    const message = { name: "", projectId: "", engineId: "" };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<CreateModelRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CreateModelRequest
  ): CreateModelRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string name */ 1:
          message.name = reader.string();
          break;
        case /* optional gooseai.FineTuningMode mode */ 2:
          message.mode = reader.int32();
          break;
        case /* optional string object_prompt */ 3:
          message.objectPrompt = reader.string();
          break;
        case /* string project_id */ 4:
          message.projectId = reader.string();
          break;
        case /* string engine_id */ 5:
          message.engineId = reader.string();
          break;
        case /* optional google.protobuf.Struct extras */ 2047:
          message.extras = Struct.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.extras
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CreateModelRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string name = 1; */
    if (message.name !== "")
      writer.tag(1, WireType.LengthDelimited).string(message.name);
    /* optional gooseai.FineTuningMode mode = 2; */
    if (message.mode !== undefined)
      writer.tag(2, WireType.Varint).int32(message.mode);
    /* optional string object_prompt = 3; */
    if (message.objectPrompt !== undefined)
      writer.tag(3, WireType.LengthDelimited).string(message.objectPrompt);
    /* string project_id = 4; */
    if (message.projectId !== "")
      writer.tag(4, WireType.LengthDelimited).string(message.projectId);
    /* string engine_id = 5; */
    if (message.engineId !== "")
      writer.tag(5, WireType.LengthDelimited).string(message.engineId);
    /* optional google.protobuf.Struct extras = 2047; */
    if (message.extras)
      Struct.internalBinaryWrite(
        message.extras,
        writer.tag(2047, WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message gooseai.CreateModelRequest
 */
export const CreateModelRequest = new CreateModelRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateModelResponse$Type extends MessageType<CreateModelResponse> {
  constructor() {
    super("gooseai.CreateModelResponse", [
      { no: 1, name: "model", kind: "message", T: () => FineTuningModel },
    ]);
  }
  create(value?: PartialMessage<CreateModelResponse>): CreateModelResponse {
    const message = {};
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<CreateModelResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CreateModelResponse
  ): CreateModelResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* gooseai.FineTuningModel model */ 1:
          message.model = FineTuningModel.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.model
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CreateModelResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* gooseai.FineTuningModel model = 1; */
    if (message.model)
      FineTuningModel.internalBinaryWrite(
        message.model,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message gooseai.CreateModelResponse
 */
export const CreateModelResponse = new CreateModelResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetModelRequest$Type extends MessageType<GetModelRequest> {
  constructor() {
    super("gooseai.GetModelRequest", [
      { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(value?: PartialMessage<GetModelRequest>): GetModelRequest {
    const message = { id: "" };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<GetModelRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GetModelRequest
  ): GetModelRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string id */ 1:
          message.id = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: GetModelRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string id = 1; */
    if (message.id !== "")
      writer.tag(1, WireType.LengthDelimited).string(message.id);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message gooseai.GetModelRequest
 */
export const GetModelRequest = new GetModelRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetModelResponse$Type extends MessageType<GetModelResponse> {
  constructor() {
    super("gooseai.GetModelResponse", [
      { no: 1, name: "model", kind: "message", T: () => FineTuningModel },
    ]);
  }
  create(value?: PartialMessage<GetModelResponse>): GetModelResponse {
    const message = {};
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<GetModelResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GetModelResponse
  ): GetModelResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* gooseai.FineTuningModel model */ 1:
          message.model = FineTuningModel.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.model
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: GetModelResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* gooseai.FineTuningModel model = 1; */
    if (message.model)
      FineTuningModel.internalBinaryWrite(
        message.model,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message gooseai.GetModelResponse
 */
export const GetModelResponse = new GetModelResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateModelRequest$Type extends MessageType<UpdateModelRequest> {
  constructor() {
    super("gooseai.UpdateModelRequest", [
      { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      {
        no: 2,
        name: "name",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 3,
        name: "mode",
        kind: "enum",
        opt: true,
        T: () => [
          "gooseai.FineTuningMode",
          FineTuningMode,
          "FINE_TUNING_MODE_",
        ],
      },
      {
        no: 4,
        name: "object_prompt",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 5,
        name: "engine_id",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
  create(value?: PartialMessage<UpdateModelRequest>): UpdateModelRequest {
    const message = { id: "" };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<UpdateModelRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: UpdateModelRequest
  ): UpdateModelRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string id */ 1:
          message.id = reader.string();
          break;
        case /* optional string name */ 2:
          message.name = reader.string();
          break;
        case /* optional gooseai.FineTuningMode mode */ 3:
          message.mode = reader.int32();
          break;
        case /* optional string object_prompt */ 4:
          message.objectPrompt = reader.string();
          break;
        case /* optional string engine_id */ 5:
          message.engineId = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: UpdateModelRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string id = 1; */
    if (message.id !== "")
      writer.tag(1, WireType.LengthDelimited).string(message.id);
    /* optional string name = 2; */
    if (message.name !== undefined)
      writer.tag(2, WireType.LengthDelimited).string(message.name);
    /* optional gooseai.FineTuningMode mode = 3; */
    if (message.mode !== undefined)
      writer.tag(3, WireType.Varint).int32(message.mode);
    /* optional string object_prompt = 4; */
    if (message.objectPrompt !== undefined)
      writer.tag(4, WireType.LengthDelimited).string(message.objectPrompt);
    /* optional string engine_id = 5; */
    if (message.engineId !== undefined)
      writer.tag(5, WireType.LengthDelimited).string(message.engineId);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message gooseai.UpdateModelRequest
 */
export const UpdateModelRequest = new UpdateModelRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateModelResponse$Type extends MessageType<UpdateModelResponse> {
  constructor() {
    super("gooseai.UpdateModelResponse", [
      { no: 1, name: "model", kind: "message", T: () => FineTuningModel },
    ]);
  }
  create(value?: PartialMessage<UpdateModelResponse>): UpdateModelResponse {
    const message = {};
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<UpdateModelResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: UpdateModelResponse
  ): UpdateModelResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* gooseai.FineTuningModel model */ 1:
          message.model = FineTuningModel.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.model
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: UpdateModelResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* gooseai.FineTuningModel model = 1; */
    if (message.model)
      FineTuningModel.internalBinaryWrite(
        message.model,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message gooseai.UpdateModelResponse
 */
export const UpdateModelResponse = new UpdateModelResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteModelRequest$Type extends MessageType<DeleteModelRequest> {
  constructor() {
    super("gooseai.DeleteModelRequest", [
      { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(value?: PartialMessage<DeleteModelRequest>): DeleteModelRequest {
    const message = { id: "" };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<DeleteModelRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: DeleteModelRequest
  ): DeleteModelRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string id */ 1:
          message.id = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: DeleteModelRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string id = 1; */
    if (message.id !== "")
      writer.tag(1, WireType.LengthDelimited).string(message.id);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message gooseai.DeleteModelRequest
 */
export const DeleteModelRequest = new DeleteModelRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteModelResponse$Type extends MessageType<DeleteModelResponse> {
  constructor() {
    super("gooseai.DeleteModelResponse", [
      { no: 1, name: "model", kind: "message", T: () => FineTuningModel },
    ]);
  }
  create(value?: PartialMessage<DeleteModelResponse>): DeleteModelResponse {
    const message = {};
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<DeleteModelResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: DeleteModelResponse
  ): DeleteModelResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* gooseai.FineTuningModel model */ 1:
          message.model = FineTuningModel.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.model
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: DeleteModelResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* gooseai.FineTuningModel model = 1; */
    if (message.model)
      FineTuningModel.internalBinaryWrite(
        message.model,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message gooseai.DeleteModelResponse
 */
export const DeleteModelResponse = new DeleteModelResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResubmitModelRequest$Type extends MessageType<ResubmitModelRequest> {
  constructor() {
    super("gooseai.ResubmitModelRequest", [
      { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(value?: PartialMessage<ResubmitModelRequest>): ResubmitModelRequest {
    const message = { id: "" };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<ResubmitModelRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ResubmitModelRequest
  ): ResubmitModelRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string id */ 1:
          message.id = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ResubmitModelRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string id = 1; */
    if (message.id !== "")
      writer.tag(1, WireType.LengthDelimited).string(message.id);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message gooseai.ResubmitModelRequest
 */
export const ResubmitModelRequest = new ResubmitModelRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResubmitModelResponse$Type extends MessageType<ResubmitModelResponse> {
  constructor() {
    super("gooseai.ResubmitModelResponse", [
      { no: 1, name: "model", kind: "message", T: () => FineTuningModel },
    ]);
  }
  create(value?: PartialMessage<ResubmitModelResponse>): ResubmitModelResponse {
    const message = {};
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<ResubmitModelResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ResubmitModelResponse
  ): ResubmitModelResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* gooseai.FineTuningModel model */ 1:
          message.model = FineTuningModel.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.model
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ResubmitModelResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* gooseai.FineTuningModel model = 1; */
    if (message.model)
      FineTuningModel.internalBinaryWrite(
        message.model,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message gooseai.ResubmitModelResponse
 */
export const ResubmitModelResponse = new ResubmitModelResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListModelsRequest$Type extends MessageType<ListModelsRequest> {
  constructor() {
    super("gooseai.ListModelsRequest", [
      {
        no: 1,
        name: "org_id",
        kind: "scalar",
        oneof: "id",
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 2,
        name: "user_id",
        kind: "scalar",
        oneof: "id",
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
  create(value?: PartialMessage<ListModelsRequest>): ListModelsRequest {
    const message = { id: { oneofKind: undefined } };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<ListModelsRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ListModelsRequest
  ): ListModelsRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string org_id */ 1:
          message.id = {
            oneofKind: "orgId",
            orgId: reader.string(),
          };
          break;
        case /* string user_id */ 2:
          message.id = {
            oneofKind: "userId",
            userId: reader.string(),
          };
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ListModelsRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string org_id = 1; */
    if (message.id.oneofKind === "orgId")
      writer.tag(1, WireType.LengthDelimited).string(message.id.orgId);
    /* string user_id = 2; */
    if (message.id.oneofKind === "userId")
      writer.tag(2, WireType.LengthDelimited).string(message.id.userId);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message gooseai.ListModelsRequest
 */
export const ListModelsRequest = new ListModelsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListModelsResponse$Type extends MessageType<ListModelsResponse> {
  constructor() {
    super("gooseai.ListModelsResponse", [
      {
        no: 1,
        name: "models",
        kind: "message",
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => FineTuningModel,
      },
    ]);
  }
  create(value?: PartialMessage<ListModelsResponse>): ListModelsResponse {
    const message = { models: [] };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<ListModelsResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ListModelsResponse
  ): ListModelsResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated gooseai.FineTuningModel models */ 1:
          message.models.push(
            FineTuningModel.internalBinaryRead(reader, reader.uint32(), options)
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ListModelsResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* repeated gooseai.FineTuningModel models = 1; */
    for (let i = 0; i < message.models.length; i++)
      FineTuningModel.internalBinaryWrite(
        message.models[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message gooseai.ListModelsResponse
 */
export const ListModelsResponse = new ListModelsResponse$Type();
/**
 * @generated ServiceType for protobuf service gooseai.FineTuningService
 */
export const FineTuningService = new ServiceType("gooseai.FineTuningService", [
  {
    name: "CreateModel",
    options: {},
    I: CreateModelRequest,
    O: CreateModelResponse,
  },
  { name: "GetModel", options: {}, I: GetModelRequest, O: GetModelResponse },
  {
    name: "UpdateModel",
    options: {},
    I: UpdateModelRequest,
    O: UpdateModelResponse,
  },
  {
    name: "DeleteModel",
    options: {},
    I: DeleteModelRequest,
    O: DeleteModelResponse,
  },
  {
    name: "ResubmitModel",
    options: {},
    I: ResubmitModelRequest,
    O: ResubmitModelResponse,
  },
  {
    name: "ListModels",
    options: {},
    I: ListModelsRequest,
    O: ListModelsResponse,
  },
]);
