/* eslint-disable */
// @ts-nocheck
// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "finetuning.proto" (package "gooseai", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { FineTuningService } from "./finetuning";
import type { ListModelsResponse } from "./finetuning";
import type { ListModelsRequest } from "./finetuning";
import type { ResubmitModelResponse } from "./finetuning";
import type { ResubmitModelRequest } from "./finetuning";
import type { DeleteModelResponse } from "./finetuning";
import type { DeleteModelRequest } from "./finetuning";
import type { UpdateModelResponse } from "./finetuning";
import type { UpdateModelRequest } from "./finetuning";
import type { GetModelResponse } from "./finetuning";
import type { GetModelRequest } from "./finetuning";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CreateModelResponse } from "./finetuning";
import type { CreateModelRequest } from "./finetuning";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service gooseai.FineTuningService
 */
export interface IFineTuningServiceClient {
  /**
   * Create a new model and begin the fine tuning process
   *
   * @generated from protobuf rpc: CreateModel(gooseai.CreateModelRequest) returns (gooseai.CreateModelResponse);
   */
  createModel(
    input: CreateModelRequest,
    options?: RpcOptions
  ): UnaryCall<CreateModelRequest, CreateModelResponse>;
  /**
   * Get a FineTuningModel
   *
   * @generated from protobuf rpc: GetModel(gooseai.GetModelRequest) returns (gooseai.GetModelResponse);
   */
  getModel(
    input: GetModelRequest,
    options?: RpcOptions
  ): UnaryCall<GetModelRequest, GetModelResponse>;
  /**
   * Update a FineTuningModel by id
   *
   * @generated from protobuf rpc: UpdateModel(gooseai.UpdateModelRequest) returns (gooseai.UpdateModelResponse);
   */
  updateModel(
    input: UpdateModelRequest,
    options?: RpcOptions
  ): UnaryCall<UpdateModelRequest, UpdateModelResponse>;
  /**
   * Delete a fine tuned model
   *
   * @generated from protobuf rpc: DeleteModel(gooseai.DeleteModelRequest) returns (gooseai.DeleteModelResponse);
   */
  deleteModel(
    input: DeleteModelRequest,
    options?: RpcOptions
  ): UnaryCall<DeleteModelRequest, DeleteModelResponse>;
  /**
   * Re-run training, does not create a new model
   *
   * @generated from protobuf rpc: ResubmitModel(gooseai.ResubmitModelRequest) returns (gooseai.ResubmitModelResponse);
   */
  resubmitModel(
    input: ResubmitModelRequest,
    options?: RpcOptions
  ): UnaryCall<ResubmitModelRequest, ResubmitModelResponse>;
  /**
   * List all the fine tuned models for an organization or user
   *
   * @generated from protobuf rpc: ListModels(gooseai.ListModelsRequest) returns (gooseai.ListModelsResponse);
   */
  listModels(
    input: ListModelsRequest,
    options?: RpcOptions
  ): UnaryCall<ListModelsRequest, ListModelsResponse>;
}
/**
 * @generated from protobuf service gooseai.FineTuningService
 */
export class FineTuningServiceClient
  implements IFineTuningServiceClient, ServiceInfo
{
  typeName = FineTuningService.typeName;
  methods = FineTuningService.methods;
  options = FineTuningService.options;
  constructor(private readonly _transport: RpcTransport) {}
  /**
   * Create a new model and begin the fine tuning process
   *
   * @generated from protobuf rpc: CreateModel(gooseai.CreateModelRequest) returns (gooseai.CreateModelResponse);
   */
  createModel(
    input: CreateModelRequest,
    options?: RpcOptions
  ): UnaryCall<CreateModelRequest, CreateModelResponse> {
    const method = this.methods[0],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<CreateModelRequest, CreateModelResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input
    );
  }
  /**
   * Get a FineTuningModel
   *
   * @generated from protobuf rpc: GetModel(gooseai.GetModelRequest) returns (gooseai.GetModelResponse);
   */
  getModel(
    input: GetModelRequest,
    options?: RpcOptions
  ): UnaryCall<GetModelRequest, GetModelResponse> {
    const method = this.methods[1],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<GetModelRequest, GetModelResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input
    );
  }
  /**
   * Update a FineTuningModel by id
   *
   * @generated from protobuf rpc: UpdateModel(gooseai.UpdateModelRequest) returns (gooseai.UpdateModelResponse);
   */
  updateModel(
    input: UpdateModelRequest,
    options?: RpcOptions
  ): UnaryCall<UpdateModelRequest, UpdateModelResponse> {
    const method = this.methods[2],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<UpdateModelRequest, UpdateModelResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input
    );
  }
  /**
   * Delete a fine tuned model
   *
   * @generated from protobuf rpc: DeleteModel(gooseai.DeleteModelRequest) returns (gooseai.DeleteModelResponse);
   */
  deleteModel(
    input: DeleteModelRequest,
    options?: RpcOptions
  ): UnaryCall<DeleteModelRequest, DeleteModelResponse> {
    const method = this.methods[3],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<DeleteModelRequest, DeleteModelResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input
    );
  }
  /**
   * Re-run training, does not create a new model
   *
   * @generated from protobuf rpc: ResubmitModel(gooseai.ResubmitModelRequest) returns (gooseai.ResubmitModelResponse);
   */
  resubmitModel(
    input: ResubmitModelRequest,
    options?: RpcOptions
  ): UnaryCall<ResubmitModelRequest, ResubmitModelResponse> {
    const method = this.methods[4],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<ResubmitModelRequest, ResubmitModelResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input
    );
  }
  /**
   * List all the fine tuned models for an organization or user
   *
   * @generated from protobuf rpc: ListModels(gooseai.ListModelsRequest) returns (gooseai.ListModelsResponse);
   */
  listModels(
    input: ListModelsRequest,
    options?: RpcOptions
  ): UnaryCall<ListModelsRequest, ListModelsResponse> {
    const method = this.methods[5],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<ListModelsRequest, ListModelsResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input
    );
  }
}
